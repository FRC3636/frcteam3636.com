---
// This component handles layout & lazy loading of iframes.
// The iframe is wrapped in a div which allows it to shrink while maintaining its aspect ratio but not grow past its
// original width and height, which makes it better for mobile.

// Frames and videos under `<the-fold />` on any page are transformed by @divriots/jampack at build-time to use lazy loading.

// To use the component, just set either `src` to the URL or `videoId` to the YouTube video ID, and also set the maximum
// `width` and `height`. Add any other miscellaneous iframe properties as you desire.

import type { HTMLAttributes } from "astro/types";

type BaseProps = {
    width: number;
    height: number;
    cover?: boolean;
    /** Fixes Flash of Unstyled Content by hiding the frame before it has loaded */
    fixFOUC?: boolean;
};
type SourceProps =
    | { src?: string }
    | {
    videoId: string;
    loop?: boolean;
    simple?: boolean;
    autoplay?: boolean;
    startAt?: number;
};
export type Props = SourceProps & BaseProps & HTMLAttributes<"iframe">;

let {
    width,
    height,
    allow,
    allowfullscreen,
    src,
    class: className,
    cover,
    fixFOUC,
    ...rest
} = Astro.props;

if ("videoId" in Astro.props) {
    if (!src) {
        src = `https://www.youtube-nocookie.com/embed/${encodeURIComponent(Astro.props.videoId)}?rel=0`;
        if (Astro.props.autoplay ?? true) {
            src += "&autoplay=1&mute=1";
        }
        if (Astro.props.loop) {
            src += `&loop=1&playlist=${encodeURIComponent(Astro.props.videoId)}`;
        }
        if (Astro.props.simple) {
            src += `&controls=0`;
        }
        if (Astro.props.startAt) {
            src += `&start=${Astro.props.startAt}`;
        }
    }
    allow ??=
        "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share";
    allowfullscreen ??= true;
    // Prevent this from showing up in final HTML
    delete (rest as Record<string, unknown>).videoId;
}
---

<div class:list={[className, "frame-container"]} data-cover={cover} {...rest}>
    <slot>
        <iframe
            {src}
            {allow}
            {allowfullscreen}
            referrerpolicy="strict-origin-when-cross-origin"
            loading="lazy"
            data-no-fouc={fixFOUC}
            {...rest}></iframe>
    </slot>
</div>

<style
    lang="scss"
    define:vars={{
        aspect: `${width / height}`,
        width: `${width}px`
    }}
>
    .frame-container:not([data-cover="true"]) {
        aspect-ratio: var(--aspect);
        max-width: var(--width);
        width: 100%;

        // Grow to parent size
        :global(*) {
            width: 100%;
            height: 100%;
            background-color: black;
        }
    }

    // First tried this, but you need to know the aspect ratio statically: https://codepen.io/JamesAlias/pen/QWovwgP
    // Now using this: https://stackoverflow.com/a/79395341

    .frame-container[data-cover="true"] {
        container-type: inline-size;
        display: flex;
        justify-content: center;
        align-items: center;
        overflow: hidden;

        :global(*) {
            min-width: max(calc(100cqh * var(--aspect)), 100vw);
            aspect-ratio: var(--aspect);
        }
    }
</style>

<script>
    // Hide iframes that haven't loaded yet.
    const frames = document.querySelectorAll<HTMLIFrameElement>(
        "iframe[data-no-fouc=\"true\"]"
    );
    for (const frame of frames) {
        frame.style.opacity = "0";
        frame.onload = () => (frame.style.opacity = "1");
    }
</script>
